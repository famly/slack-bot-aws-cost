service: aws-billing-to-slack

provider:
  name: aws
  profile: ${param:aws_profile, env:AWS_PROFILE, 'default'}
  region: ${env:AWS_REGION, env:AWS_DEFAULT_REGION, 'eu-central-1'}
  runtime: python3.9

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "ce:GetCostAndUsage"
          Resource: "*"
          # Needed to get account alias.
        - Effect: "Allow"
          Action:
            - "iam:ListAccountAliases"
          Resource: "*"

functions:
  reportCostToSlack:
    handler: handler.lambda_handler

    description: Send account daily billing data to Slack

    # Keep costs minimal.
    memorySize: 128
    timeout: 10

    events:
      # Every day at 07:00 UTC.
      - schedule: cron(0 07 * * ? *)

    environment:
      GROUP_BY: ${param:group, 'SERVICE'}
      LENGTH: ${param:group_length, 10}
      SLACK_WEBHOOK_URL: ${param:slack_url, ''}
      DAILY_BUDGET: ${param:daily_budget, ''}
      TEAMS_WEBHOOK_URL: ${param:teams_url, ''}
      AWS_ACCOUNT_NAME: ${param:aws_account, ''}
      CREDITS_EXPIRE_DATE: ${param:credits_expire_date, ''}
      CREDITS_REMAINING_AS_OF: ${param:credits_remaining_date, ''}
      CREDITS_REMAINING: ${param:credits_remaining, ''}
      COST_AGGREGATION: ${param:cost_aggregation, 'AmortizedCost'}

plugins:
  - serverless-python-requirements
